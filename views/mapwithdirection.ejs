<!DOCTYPE html>
<html>
<head>
  <title>Multi Device GPS Tracker</title>
  <style>
    #map { height: 80vh; width: 100%; }
    .device-panel {
      background: #f8f9fa;
      padding: 15px;
      margin: 10px 0;
      border-radius: 5px;
    }
    .device-selector {
      width: 100%;
      padding: 8px;
      margin: 5px 0;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .device-info {
      background: #007bff;
      color: white;
      padding: 10px;
      border-radius: 5px;
      margin: 5px 0;
    }
    .controls { margin: 10px 0; }
    button { 
      padding: 8px 15px; 
      margin: 5px; 
      background: #007bff; 
      color: white; 
      border: none; 
      border-radius: 4px; 
      cursor: pointer; 
    }
    .info-window {
      font-family: Arial, sans-serif;
      padding: 10px;
    }
    /* Custom marker style */
    .custom-marker {
      width: 20px;
      height: 20px;
      background-color: #FF0000;
      border: 3px solid #FFFFFF;
      border-radius: 50%;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    }
  </style>
</head>
<body>
  <h2>üöó Multi Device GPS Tracking</h2>
  
  <div class="device-panel">
    <label><strong>üì± Select Device:</strong></label>
    <select class="device-selector" id="deviceSelector" onchange="changeDevice()">
      <% devices.forEach(device => { %>
        <option value="<%= device.device_mac %>" 
                <%= selectedDevice === device.device_mac ? 'selected' : '' %>>
          <%= device.device_name %> - <%= device.vehicle_number %>
        </option>
      <% }); %>
    </select>

    <div class="device-info" id="currentDevice">Device: Loading...</div>

    <div class="controls">
      <button onclick="toggleSmoothMovement()" class="smooth-controls">üéØ Smooth Movement: ON</button>
      <button onclick="clearPath()">üóëÔ∏è Clear Path</button>
      <button onclick="toggleAutoCenter()">üéØ Auto-Center: ON</button>
    </div>

    <div id="lastUpdate">Last update: Loading...</div>
  </div>

  <div id="map"></div>

  <script id="gps-data" type="application/json">
    <%- JSON.stringify(
      gpsData && !isNaN(parseFloat(gpsData.latitude)) && !isNaN(parseFloat(gpsData.longitude))
        ? { lat: parseFloat(gpsData.latitude), lng: parseFloat(gpsData.longitude), device_mac: gpsData.device_mac }
        : { lat: 32.447811, lng: 74.495567, device_mac: '' }
    ) %>
  </script>

  <script>
    let gps = JSON.parse(document.getElementById('gps-data').textContent);
    let map, marker, pathPolyline, infoWindow;
    let pathCoordinates = [];
    let autoCenter = true;
    let smoothMovement = true;
    let currentDevice = gps.device_mac || '';
    let isAnimating = false;
    let lastUpdateTime = null;

    // Validate GPS coordinates
    function validateCoords(lat, lng) {
      const latitude = parseFloat(lat);
      const longitude = parseFloat(lng);
      return !isNaN(latitude) && !isNaN(longitude) && 
             isFinite(latitude) && isFinite(longitude) &&
             latitude >= -90 && latitude <= 90 &&
             longitude >= -180 && longitude <= 180;
    }

    // Ensure valid initial coordinates
    if (!validateCoords(gps.lat, gps.lng)) {
      console.warn('Invalid GPS coordinates, using default');
      gps.lat = 32.447811;
      gps.lng = 74.495567;
    }

    async function initMap() {
      const center = { lat: gps.lat, lng: gps.lng };
      
      const { Map } = await google.maps.importLibrary("maps");
      const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
      
      map = new Map(document.getElementById("map"), {
        zoom: 16,
        center: center,
        mapId: "GPS_TRACKER_MAP", // Required for AdvancedMarkerElement
        mapTypeId: 'roadmap'
      });

      infoWindow = new google.maps.InfoWindow({ content: "Loading..." });
      initializeTracking();
    }

    async function initializeTracking() {
      if (!currentDevice) {
        console.warn('No device selected');
        return;
      }

      try {
        const res = await fetch(`/api/history/${currentDevice}`);
        const history = await res.json();

        if (history.length > 0) {
          pathCoordinates = history
            .filter(d => validateCoords(d.latitude, d.longitude))
            .map(d => ({
              lat: parseFloat(d.latitude),
              lng: parseFloat(d.longitude)
            }));
        }
        
        if (pathCoordinates.length === 0) {
          pathCoordinates = [{ lat: gps.lat, lng: gps.lng }];
        }

        // Polyline
        if (pathPolyline) pathPolyline.setMap(null);
        pathPolyline = new google.maps.Polyline({
          path: pathCoordinates,
          geodesic: true,
          strokeColor: "#007bff",
          strokeOpacity: 1.0,
          strokeWeight: 4,
          map: map
        });

        // Create custom marker element
        const lastPoint = pathCoordinates[pathCoordinates.length - 1];
        const markerElement = document.createElement('div');
        markerElement.className = 'custom-marker';
        
        if (marker) marker.map = null;
        
        // Use AdvancedMarkerElement
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
        marker = new AdvancedMarkerElement({
          position: lastPoint,
          map: map,
          title: "Vehicle Location",
          content: markerElement
        });

        // Add click listener
        marker.addListener('click', () => {
          const pos = marker.position;
          const content = `
            <div class="info-window">
              <strong>üìç Vehicle Location</strong><br>
              Device: ${currentDevice}<br>
              Lat: ${pos.lat.toFixed(6)}<br>
              Lng: ${pos.lng.toFixed(6)}<br>
              Last Update: ${new Date().toLocaleTimeString()}
            </div>`;
          infoWindow.setContent(content);
          infoWindow.open(map, marker);
        });

        updateDeviceInfo();
        startLiveTracking();
      } catch (err) {
        console.error("Error loading history:", err);
      }
    }

    function changeDevice() {
      const selector = document.getElementById('deviceSelector');
      currentDevice = selector.value;

      pathCoordinates = [];
      isAnimating = false;

      initializeTracking();
    }

    function startLiveTracking() {
      fetchLatestLocation();
      setInterval(fetchLatestLocation, 1000);
    }

    async function fetchLatestLocation() {
      if (!currentDevice) return;

      try {
        const res = await fetch(`/api/latest?device_mac=${currentDevice}`);
        const data = await res.json();
        
        if (data.latitude !== undefined && data.longitude !== undefined) {
          if (validateCoords(data.latitude, data.longitude)) {
            const newPosition = { 
              lat: parseFloat(data.latitude), 
              lng: parseFloat(data.longitude) 
            };
            updateVehiclePosition(newPosition, data);
          }
        }
      } catch (err) {
        console.error("Error fetching latest:", err);
      }
    }

    function calculateSpeed(lat1, lng1, lat2, lng2, timeDiff) {
      // Calculate distance in meters using Haversine formula
      const R = 6371000; // Earth's radius in meters
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLng = (lng2 - lng1) * Math.PI / 180;
      
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
      
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c; // in meters
      
      // Calculate speed in km/h
      const speed = (distance / timeDiff) * 3.6; // timeDiff in seconds
      return Math.round(speed * 10) / 10; // Round to 1 decimal
    }

    function calculateBearing(lat1, lng1, lat2, lng2) {
      // Calculate bearing (direction) between two points
      const dLng = (lng2 - lng1) * Math.PI / 180;
      const lat1Rad = lat1 * Math.PI / 180;
      const lat2Rad = lat2 * Math.PI / 180;
      
      const y = Math.sin(dLng) * Math.cos(lat2Rad);
      const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) -
                Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLng);
      
      let bearing = Math.atan2(y, x) * 180 / Math.PI;
      bearing = (bearing + 360) % 360; // Normalize to 0-360
      return Math.round(bearing);
    }

    function updateVehiclePosition(newPosition, data) {
      const lastPos = pathCoordinates[pathCoordinates.length - 1];
      const currentTime = new Date();

      if (!lastPos || lastPos.lat !== newPosition.lat || lastPos.lng !== newPosition.lng) {
        // Calculate direction and speed if we have a previous position
        if (lastPos && lastUpdateTime) {
          const timeDiff = (currentTime - lastUpdateTime) / 1000; // in seconds
          
          if (timeDiff > 0) {
            const direction = calculateBearing(lastPos.lat, lastPos.lng, newPosition.lat, newPosition.lng);
            const speed = calculateSpeed(lastPos.lat, lastPos.lng, newPosition.lat, newPosition.lng, timeDiff);
            
            data.direction = direction;
            data.speed = speed;
          }
        }
        
        pathCoordinates.push(newPosition);
        pathPolyline.setPath(pathCoordinates);
        lastUpdateTime = currentTime;
      }

      if (marker) {
        marker.position = newPosition;
      }
      if (autoCenter) map.panTo(newPosition);
      updateDeviceInfo(data);
    }

    function updateDeviceInfo(data = null) {
      const selector = document.getElementById('deviceSelector');
      const deviceName = selector.options[selector.selectedIndex]?.text || 'Unknown';
      let info = `Device: ${deviceName} | MAC: ${currentDevice}`;
      
      if (data) {
        if (data.speed) info += ` | Speed: ${data.speed} km/h`;
        if (data.direction) info += ` | Direction: ${data.direction}¬∞`;
      }
      
      document.getElementById('currentDevice').textContent = info;
      document.getElementById('lastUpdate').textContent =
        `Last update: ${new Date().toLocaleTimeString()} | Points: ${pathCoordinates.length}`;
    }

    function toggleSmoothMovement() {
      smoothMovement = !smoothMovement;
      const btn = document.querySelector('.smooth-controls');
      btn.textContent = `üéØ Smooth Movement: ${smoothMovement ? 'ON' : 'OFF'}`;
      btn.style.background = smoothMovement ? '#28a745' : '#dc3545';
    }

    function toggleAutoCenter() {
      autoCenter = !autoCenter;
      const btn = document.querySelector('button[onclick="toggleAutoCenter()"]');
      btn.textContent = `üéØ Auto-Center: ${autoCenter ? 'ON' : 'OFF'}`;
      btn.style.background = autoCenter ? '#28a745' : '#dc3545';
    }

    function clearPath() {
      const lastPos = pathCoordinates[pathCoordinates.length - 1];
      pathCoordinates = lastPos ? [lastPos] : [];
      pathPolyline.setPath(pathCoordinates);
      updateDeviceInfo();
    }

    // Make initMap globally available
    window.initMap = initMap;
  </script>
  
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBECgGTp-4Xt3526NLYDyZd8foC0Sew-ag&callback=initMap&loading=async" async defer></script>
</body>
</html>